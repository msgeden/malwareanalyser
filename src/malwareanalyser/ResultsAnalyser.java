/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package malwareanalyser;

import java.io.File;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.io.FileUtils;

/**
 *
 * @author msgeden
 */
public class ResultsAnalyser {
	public static void main(String[] args) {
		// generateAccuracyResultsBasedOnFeatureNumber("/Users/msgeden/Desktop/Data_3600/Output/results/",
		// 8000);
		// generateAccuracyResultsBasedOnFeatureNumber("/Users/msgeden/Desktop/Data_3600/Output/results/",
		// 5000);
		// generateAccuracyResultsBasedOnFeatureNumber("/Users/msgeden/Desktop/Data_3600/Output/results/",
		// 3000);
		// generateAccuracyResultsBasedOnFeatureNumber("/Users/msgeden/Desktop/Data_3600/Output/results/",
		// 2000);
		// generateAccuracyResultsBasedOnFeatureNumber("/Users/msgeden/Desktop/Data_3600/Output/results/",
		// 1000);
		// generateAccuracyResultsBasedOnFeatureNumber("/Users/msgeden/Desktop/Data_3600_Unseen/Output/results-uf/",
		// 250);
		// generateAccuracyResultsBasedOnClassifierAlgorithm("/Users/msgeden/Desktop/Data_3600_Unseen/Output/results-uf/",
		// 1000);
		// generateAccuracyResultsBasedOnFeatureSelection("/Users/msgeden/Desktop/Data_3600/Output/results/",
		// "Sin",new String[]{"500","2000","5000","8000"});
		//generateFamilyDistribution("/Users/msgeden/Desktop/unseen_train_malware_list.tsv",
		//		"/Users/msgeden/Desktop/unseen_test_malware_list.tsv");
		// generateHeatMapData("/Users/msgeden/Desktop/Data_3600/Output/berc_field/frequencies_field.tsv");
	}

	public static void generateFamilyDistribution(String trainingList,
			String validationList) {
		// TODO Auto-generated method stub

		try {
			File training = new File(trainingList);
			File validation = new File(validationList);
			int trainSize = 0;
			int validationSize = 0;

			String distributionPath = training.getParent() + File.separator
					+ "family_distribution.tsv";
			File distribution = new File(distributionPath);
			FileUtils.deleteQuietly(distribution);
			HashMap<String, Integer[]> freqs = new HashMap<String, Integer[]>();
			List<String> traininglines = FileUtils.readLines(training);
			trainSize = traininglines.size();
			for (String line : traininglines) {
				if (line != null && !line.equals("")) {
					String[] tokens = line.split(Constants.TAB_CHAR);
					String family = tokens[1];
					if (freqs.containsKey(family)) {
						Integer[] values = freqs.get(family);
						values[0] = Integer.valueOf((int)values[0] + 1);
						freqs.put(family, values);
					} else {
						freqs.put(family, new Integer[] { 1, 0 });
					}
				}
			}
			List<String> validationLines = FileUtils.readLines(validation);
			validationSize = validationLines.size();
			for (String line : validationLines) {
				if (line != null && !line.equals("")) {
					String[] tokens = line.split(Constants.TAB_CHAR);
					String family = tokens[1];
					if (freqs.containsKey(family)) {
						Integer[] values = freqs.get(family);
						values[1] = Integer.valueOf((int)values[1] + 1);
						freqs.put(family, values);
					} else {
						freqs.put(family, new Integer[] { 0, 1 });
					}
				}
			}
			for (Map.Entry<String, Integer[]> entry : freqs.entrySet()) {
				double[] values = new double[] { 0.0, 0.0 };
				values[0] = (double) entry.getValue()[0].doubleValue()
						/ trainSize;
				values[1] = (double) entry.getValue()[1].doubleValue()
						/ validationSize;
				double totalProb =  (double) (entry.getValue()[0].doubleValue()+entry.getValue()[1].doubleValue())/(trainSize+validationSize);
				String probLines = entry.getKey().replace("Android.", "") + Constants.TAB_CHAR
						+ String.format("%.4f", values[0]) + Constants.TAB_CHAR
						+ String.format("%.4f", values[1]) + Constants.TAB_CHAR
						+ String.format("%.4f", totalProb);
				FileUtils.write(distribution, probLines + "\n", true);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void generateHeatMapData(String frequencyFilePath) {
		// TODO Auto-generated method stub

		try {
			int size = 20;
			int indexX = 0;
			int indexY = 0;
			double interval = 1.0 / size;
			int[][] matrixCounts = new int[size][size];
			for (int i = 0; i < size; i++)
				for (int j = 0; j < size; j++)
					matrixCounts[i][j] = 0;

			File frequencyFile = new File(frequencyFilePath);
			String heatMapFilePath = frequencyFile.getParent()
					+ File.separator
					+ frequencyFile.getName().substring(0,
							frequencyFile.getName().length() - 4) + "_" + size
					+ "_heatmap.tsv";
			File heatMap = new File(heatMapFilePath);
			FileUtils.deleteQuietly(heatMap);
			double classSize = 1200.0;
			HashMap<String, Double[]> probs = new HashMap<String, Double[]>();

			try {
				List<String> lines = FileUtils.readLines(frequencyFile);
				int lineNumber = 0;
				for (String line : lines) {
					lineNumber++;
					// Skip header line
					if (line != null && !line.equals("") && lineNumber != 1) {
						String[] tokens = line.split(Constants.TAB_CHAR);
						int[] freqs = new int[2];
						Double probValues[] = new Double[] { 0.0, 0.0 };
						for (int i = 0; i < freqs.length; i++) {
							// probs.put(tokens[0], probValues);
							// if ((freqs[0]+freqs[1])>1)
							try {
								probValues[i] = Double.valueOf(Double
										.valueOf(tokens[i + 1]) / classSize);
							} catch (Exception e) {
								e.printStackTrace();
							}
						}
						probs.put(tokens[0], probValues);
					}
				}

				for (Map.Entry<String, Double[]> entry : probs.entrySet()) {

					// Calculate the number of apps for each classes that owns
					// the

					Double[] values = entry.getValue();
					indexX = (int) (values[0].doubleValue() / interval);
					indexY = (int) (values[1].doubleValue() / interval);
					matrixCounts[indexY][indexX]++;
				}
				double axisY = 0.0;
				System.out.print(axisY + Constants.TAB_CHAR);
				FileUtils.write(heatMap, axisY + Constants.TAB_CHAR, true);
				for (int i = 0; i < size; i++) {
					axisY += interval;
					System.out.print(String.format("%.3f", axisY)
							+ Constants.TAB_CHAR);
					FileUtils.write(heatMap, String.format("%.3f", axisY)
							+ Constants.TAB_CHAR, true);
				}
				System.out.print("\n");
				FileUtils.write(heatMap, "\n", true);
				for (int i = 0; i < size; i++) {
					System.out.print(String.format("%.3f", (i + 1) * interval)
							+ Constants.TAB_CHAR);
					FileUtils.write(heatMap,
							String.format("%.3f", (i + 1) * interval)
									+ Constants.TAB_CHAR, true);
					for (int j = 0; j < size; j++) {
						double logOccur = Math.log(matrixCounts[i][j])
								/ Math.log(2);
						if (Double.isInfinite(logOccur))
							logOccur = 0.0;
						System.out.print(matrixCounts[i][j] + ":" + logOccur
								+ Constants.TAB_CHAR);
						FileUtils.write(heatMap, logOccur + Constants.TAB_CHAR,
								true);

					}
					System.out.print("\n");
					FileUtils.write(heatMap, "\n", true);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void generateAccuracyResultsBasedOnClassifierAlgorithm(
			String sourceFolder, int featureCount) {
		// TODO Auto-generated method stub

		try {

			String numberOfFeatures = Integer.toString(featureCount);
			Collection<File> files = FileHandler.findFiles(sourceFolder,
					new String[] { "tsv" });
			File source = new File(sourceFolder);
			String resultIGPath = source.getParent() + File.separator
					+ "overall_results_ig_" + numberOfFeatures + ".tsv";
			File igFile = new File(resultIGPath);
			FileUtils.deleteQuietly(igFile);
			String resultNADPath = source.getParent() + File.separator
					+ "overall_results_nad_" + numberOfFeatures + ".tsv";
			File nadFile = new File(resultNADPath);
			FileUtils.deleteQuietly(nadFile);
			String resultCWIGPath = source.getParent() + File.separator
					+ "overall_results_cwig_" + numberOfFeatures + ".tsv";
			File cwigFile = new File(resultCWIGPath);
			FileUtils.deleteQuietly(cwigFile);
			String resultCWNADPath = source.getParent() + File.separator
					+ "overall_results_cwnad_" + numberOfFeatures + ".tsv";
			File cwnadFile = new File(resultCWNADPath);
			FileUtils.deleteQuietly(cwnadFile);

			System.out.print("Configuration\tNB\tIBk\tRF\tSVM\n");
			FileUtils.write(igFile, "Configuration\tNB\tIBk\tRF\tSVM\n", true);
			FileUtils.write(nadFile, "Configuration\tNB\tIBk\tRF\tSVM\n", true);
			FileUtils
					.write(cwigFile, "Configuration\tNB\tIBk\tRF\tSVM\n", true);
			FileUtils.write(cwnadFile, "Configuration\tNB\tIBk\tRF\tSVM\n",
					true);

			for (File file : files) {
				boolean readIG = false;
				boolean readNAD = false;
				boolean readCWIG = false;
				boolean readCWNAD = false;
				String configuration = file.getName().substring(0,
						file.getName().indexOf("weka_total") - 1);
				String[] lines = FileHandler.readFileToString(
						file.getAbsolutePath()).split("\r");
				if (lines.length == 1)
					lines = FileHandler
							.readFileToString(file.getAbsolutePath()).split(
									"\n");
				FileUtils.write(igFile, configuration + Constants.TAB_CHAR,
						true);
				FileUtils.write(nadFile, configuration + Constants.TAB_CHAR,
						true);
				FileUtils.write(cwigFile, configuration + Constants.TAB_CHAR,
						true);
				FileUtils.write(cwnadFile, configuration + Constants.TAB_CHAR,
						true);
				System.out.print(configuration + Constants.TAB_CHAR);
				for (String line : lines) {
					if (line.contains("IG") && !(line.contains("Classwise")))
						readIG = true;
					else if (line.contains("Sin")
							&& !(line.contains("Classwise")))
						readNAD = true;
					else if (line.contains("IG")
							&& (line.contains("Classwise")))
						readCWIG = true;
					else if (line.contains("Sin")
							&& (line.contains("Classwise")))
						readCWNAD = true;

					if (line.startsWith(numberOfFeatures + Constants.TAB_CHAR)) {
						String[] tabs = line.split(Constants.TAB_CHAR);
						if (readIG) {
							FileUtils.write(igFile, tabs[5]
									+ Constants.TAB_CHAR + tabs[9]
									+ Constants.TAB_CHAR + tabs[17]
									+ Constants.TAB_CHAR + tabs[21]
									+ Constants.TAB_CHAR, true);// NB
							readIG = false;
						}
						if (readNAD) {
							FileUtils.write(nadFile, tabs[5]
									+ Constants.TAB_CHAR + tabs[9]
									+ Constants.TAB_CHAR + tabs[17]
									+ Constants.TAB_CHAR + tabs[21]
									+ Constants.TAB_CHAR, true);// NB
							readNAD = false;
						}
						if (readCWIG) {
							FileUtils.write(cwigFile, tabs[5]
									+ Constants.TAB_CHAR + tabs[9]
									+ Constants.TAB_CHAR + tabs[17]
									+ Constants.TAB_CHAR + tabs[21]
									+ Constants.TAB_CHAR, true);// NB
							readCWIG = false;
						}
						if (readCWNAD) {
							FileUtils.write(cwnadFile, tabs[5]
									+ Constants.TAB_CHAR + tabs[9]
									+ Constants.TAB_CHAR + tabs[17]
									+ Constants.TAB_CHAR + tabs[21]
									+ Constants.TAB_CHAR, true);// NB
							readCWNAD = false;
						}
						System.out.print(tabs[5] + Constants.TAB_CHAR + tabs[9]
								+ Constants.TAB_CHAR + tabs[17]
								+ Constants.TAB_CHAR + tabs[21]
								+ Constants.TAB_CHAR);

					}
				}
				FileUtils.write(igFile, "\n", true);
				FileUtils.write(nadFile, "\n", true);
				FileUtils.write(cwigFile, "\n", true);
				FileUtils.write(cwnadFile, "\n", true);
				System.out.print("\n");
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void generateAccuracyResultsBasedOnFeatureNumber(
			String sourceFolder, int featureCount) {
		// TODO Auto-generated method stub

		try {

			String numberOfFeatures = Integer.toString(featureCount);
			Collection<File> files = FileHandler.findFiles(sourceFolder,
					new String[] { "tsv" });
			File source = new File(sourceFolder);
			String resultNBPath = source.getParent() + File.separator
					+ "overall_results_nb_" + numberOfFeatures + ".tsv";
			File nbFile = new File(resultNBPath);
			FileUtils.deleteQuietly(nbFile);
			String resultKNNPath = source.getParent() + File.separator
					+ "overall_results_knn_" + numberOfFeatures + ".tsv";
			File knnFile = new File(resultKNNPath);
			FileUtils.deleteQuietly(knnFile);
			String resultRFPath = source.getParent() + File.separator
					+ "overall_results_rf_" + numberOfFeatures + ".tsv";
			File rfFile = new File(resultRFPath);
			FileUtils.deleteQuietly(rfFile);
			String resultSVMPath = source.getParent() + File.separator
					+ "overall_results_svm_" + numberOfFeatures + ".tsv";
			File svmFile = new File(resultSVMPath);
			FileUtils.deleteQuietly(svmFile);

			System.out.print("Configuration\tCW-IG\tIG\tNAD\tCWNAD\n");
			FileUtils.write(nbFile, "Configuration\tCW-IG\tIG\tNAD\tCWNAD\n",
					true);
			FileUtils.write(knnFile, "Configuration\tCW-IG\tIG\tNAD\tCWNAD\n",
					true);
			FileUtils.write(rfFile, "Configuration\tCW-IG\tIG\tNAD\tCWNAD\n",
					true);
			FileUtils.write(svmFile, "Configuration\tCW-IG\tIG\tNAD\tCWNAD\n",
					true);

			for (File file : files) {
				String configuration = file.getName().substring(0,
						file.getName().indexOf("weka_total") - 1);
				String[] lines = FileHandler.readFileToString(
						file.getAbsolutePath()).split("\r");
				if (lines.length == 1)
					lines = FileHandler
							.readFileToString(file.getAbsolutePath()).split(
									"\n");
				FileUtils.write(nbFile, configuration + Constants.TAB_CHAR,
						true);
				FileUtils.write(knnFile, configuration + Constants.TAB_CHAR,
						true);
				FileUtils.write(rfFile, configuration + Constants.TAB_CHAR,
						true);
				FileUtils.write(svmFile, configuration + Constants.TAB_CHAR,
						true);
				System.out.print(configuration + Constants.TAB_CHAR);
				for (String line : lines) {
					if (line.startsWith(numberOfFeatures + Constants.TAB_CHAR)) {
						String[] tabs = line.split(Constants.TAB_CHAR);
						FileUtils.write(nbFile, tabs[5] + Constants.TAB_CHAR,
								true);// NB
						FileUtils.write(knnFile, tabs[9] + Constants.TAB_CHAR,
								true);// KNN
						FileUtils.write(rfFile, tabs[17] + Constants.TAB_CHAR,
								true);// RF
						FileUtils.write(svmFile, tabs[21] + Constants.TAB_CHAR,
								true);// SVM
						System.out.print(tabs[5] + Constants.TAB_CHAR);

					}
				}
				FileUtils.write(nbFile, "\n", true);
				FileUtils.write(knnFile, "\n", true);
				FileUtils.write(rfFile, "\n", true);
				FileUtils.write(svmFile, "\n", true);
				System.out.print("\n");
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void generateAccuracyResultsBasedOnFeatureSelection(
			String sourceFolder, String technique, String[] featureNumbers) {
		// TODO Auto-generated method stub

		try {

			Collection<File> files = FileHandler.findFiles(sourceFolder,
					new String[] { "tsv" });
			File source = new File(sourceFolder);
			String resultNBPath = source.getParent() + File.separator
					+ "overall_results_nb_" + technique + ".tsv";
			File nbFile = new File(resultNBPath);
			FileUtils.deleteQuietly(nbFile);
			String resultKNNPath = source.getParent() + File.separator
					+ "overall_results_knn_" + technique + ".tsv";
			File knnFile = new File(resultKNNPath);
			FileUtils.deleteQuietly(knnFile);
			String resultRFPath = source.getParent() + File.separator
					+ "overall_results_rf_" + technique + ".tsv";
			File rfFile = new File(resultRFPath);
			FileUtils.deleteQuietly(rfFile);
			String resultSVMPath = source.getParent() + File.separator
					+ "overall_results_svm_" + technique + ".tsv";
			File svmFile = new File(resultSVMPath);
			FileUtils.deleteQuietly(svmFile);

			System.out.print("Configuration");
			FileUtils.write(nbFile, "Configuration", true);
			FileUtils.write(knnFile, "Configuration", true);
			FileUtils.write(rfFile, "Configuration", true);
			FileUtils.write(svmFile, "Configuration", true);

			for (String number : featureNumbers) {
				FileUtils.write(nbFile, Constants.TAB_CHAR + number, true);
				FileUtils.write(knnFile, Constants.TAB_CHAR + number, true);
				FileUtils.write(rfFile, Constants.TAB_CHAR + number, true);
				FileUtils.write(svmFile, Constants.TAB_CHAR + number, true);
			}

			FileUtils.write(nbFile, "\n", true);
			FileUtils.write(knnFile, "\n", true);
			FileUtils.write(rfFile, "\n", true);
			FileUtils.write(svmFile, "\n", true);

			for (File file : files) {
				String configuration = file.getName().substring(0,
						file.getName().indexOf("weka_total") - 1);
				String[] lines = FileHandler.readFileToString(
						file.getAbsolutePath()).split("\r");
				if (lines.length == 1)
					lines = FileHandler
							.readFileToString(file.getAbsolutePath()).split(
									"\n");

				FileUtils.write(nbFile, configuration + Constants.TAB_CHAR,
						true);
				FileUtils.write(knnFile, configuration + Constants.TAB_CHAR,
						true);
				FileUtils.write(rfFile, configuration + Constants.TAB_CHAR,
						true);
				FileUtils.write(svmFile, configuration + Constants.TAB_CHAR,
						true);
				System.out.print(configuration + Constants.TAB_CHAR);
				for (int i = 0; i < lines.length; i++) {
					if (lines[i].contains(technique)
							&& !(lines[i].contains("Classwise"))) {
						for (int j = 1; j < 11; j++) {
							if (lines[i + j].startsWith(featureNumbers[0]
									+ Constants.TAB_CHAR)) {
								String[] tabs = lines[i + j]
										.split(Constants.TAB_CHAR);
								FileUtils.write(nbFile, tabs[5]
										+ Constants.TAB_CHAR, true);
								FileUtils.write(knnFile, tabs[9]
										+ Constants.TAB_CHAR, true);
								FileUtils.write(rfFile, tabs[17]
										+ Constants.TAB_CHAR, true);
								FileUtils.write(svmFile, tabs[21]
										+ Constants.TAB_CHAR, true);
							}
							if (lines[i + j].startsWith(featureNumbers[1]
									+ Constants.TAB_CHAR)) {
								String[] tabs = lines[i + j]
										.split(Constants.TAB_CHAR);
								FileUtils.write(nbFile, tabs[5]
										+ Constants.TAB_CHAR, true);
								FileUtils.write(knnFile, tabs[9]
										+ Constants.TAB_CHAR, true);
								FileUtils.write(rfFile, tabs[17]
										+ Constants.TAB_CHAR, true);
								FileUtils.write(svmFile, tabs[21]
										+ Constants.TAB_CHAR, true);
							}
							if (lines[i + j].startsWith(featureNumbers[2]
									+ Constants.TAB_CHAR)) {
								String[] tabs = lines[i + j]
										.split(Constants.TAB_CHAR);
								FileUtils.write(nbFile, tabs[5]
										+ Constants.TAB_CHAR, true);
								FileUtils.write(knnFile, tabs[9]
										+ Constants.TAB_CHAR, true);
								FileUtils.write(rfFile, tabs[17]
										+ Constants.TAB_CHAR, true);
								FileUtils.write(svmFile, tabs[21]
										+ Constants.TAB_CHAR, true);
							}
							if (lines[i + j].startsWith(featureNumbers[3]
									+ Constants.TAB_CHAR)) {
								String[] tabs = lines[i + j]
										.split(Constants.TAB_CHAR);
								FileUtils.write(nbFile, tabs[5]
										+ Constants.TAB_CHAR, true);
								FileUtils.write(knnFile, tabs[9]
										+ Constants.TAB_CHAR, true);
								FileUtils.write(rfFile, tabs[17]
										+ Constants.TAB_CHAR, true);
								FileUtils.write(svmFile, tabs[21]
										+ Constants.TAB_CHAR, true);
							}
							// if
							// (lines[i+j].startsWith(featureNumbers[4]+Constants.TAB_CHAR))
							// {
							// String[] tabs =
							// lines[i+j].split(Constants.TAB_CHAR);
							// FileUtils.write(nbFile,
							// tabs[5]+Constants.TAB_CHAR, true);
							// FileUtils.write(knnFile,
							// tabs[9]+Constants.TAB_CHAR, true);
							// FileUtils.write(rfFile,
							// tabs[17]+Constants.TAB_CHAR, true);
							// FileUtils.write(svmFile,
							// tabs[21]+Constants.TAB_CHAR, true);
							// }
							// if
							// (lines[i+j].startsWith(featureNumbers[5]+Constants.TAB_CHAR))
							// {
							// String[] tabs =
							// lines[i+j].split(Constants.TAB_CHAR);
							// FileUtils.write(nbFile,
							// tabs[5]+Constants.TAB_CHAR, true);
							// FileUtils.write(knnFile,
							// tabs[9]+Constants.TAB_CHAR, true);
							// FileUtils.write(rfFile,
							// tabs[17]+Constants.TAB_CHAR, true);
							// FileUtils.write(svmFile,
							// tabs[21]+Constants.TAB_CHAR, true);
							// }
							// if
							// (lines[i+j].startsWith(featureNumbers[6]+Constants.TAB_CHAR))
							// {
							// String[] tabs =
							// lines[i+j].split(Constants.TAB_CHAR);
							// FileUtils.write(nbFile,
							// tabs[5]+Constants.TAB_CHAR, true);
							// FileUtils.write(knnFile,
							// tabs[9]+Constants.TAB_CHAR, true);
							// FileUtils.write(rfFile,
							// tabs[17]+Constants.TAB_CHAR, true);
							// FileUtils.write(svmFile,
							// tabs[21]+Constants.TAB_CHAR, true);
							// }
							// if
							// (lines[i+j].startsWith(featureNumbers[7]+Constants.TAB_CHAR))
							// {
							// String[] tabs =
							// lines[i+j].split(Constants.TAB_CHAR);
							// FileUtils.write(nbFile,
							// tabs[5]+Constants.TAB_CHAR, true);
							// FileUtils.write(knnFile,
							// tabs[9]+Constants.TAB_CHAR, true);
							// FileUtils.write(rfFile,
							// tabs[17]+Constants.TAB_CHAR, true);
							// FileUtils.write(svmFile,
							// tabs[21]+Constants.TAB_CHAR, true);
							// }
						}
					}

				}
				FileUtils.write(nbFile, "\n", true);
				FileUtils.write(knnFile, "\n", true);
				FileUtils.write(rfFile, "\n", true);
				FileUtils.write(svmFile, "\n", true);
				System.out.print("\n");
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
