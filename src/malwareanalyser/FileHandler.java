/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package malwareanalyser;

import java.io.*;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;

import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.ArrayUtils;

import java.util.Collection;

/**
 *
 * @author msgeden
 */
public class FileHandler {

	private static final String configFile = "config.properties";

	public static String[] getAppPaths(String dataPath, String extension,
			boolean isTestData) {
		String dataTypeFolder = "";
		if (!(dataPath.contains(File.separator + Constants.TEST_LABEL
				+ File.separator) || dataPath.contains(File.separator
				+ Constants.TRAIN_LABEL + File.separator))) {
			dataTypeFolder = isTestData ? Constants.TEST_LABEL
					: Constants.TRAIN_LABEL;
		}
		String classPathA = dataPath + File.separator + dataTypeFolder
				+ File.separator + Constants.CLASS_A_NAME + File.separator
				+ extension.toUpperCase() + File.separator;
		String classPathB = dataPath + File.separator + dataTypeFolder
				+ File.separator + Constants.CLASS_B_NAME + File.separator
				+ extension.toUpperCase() + File.separator;
		String[] appPaths = ArrayUtils.addAll(
				FileHandler.findFolderContents(classPathA),
				FileHandler.findFolderContents(classPathB));
		return appPaths;
	}

	public static String getAppNameOfFile(String appPath, String extension) {
		// Retrieve app name from file path
		if (appPath.contains(Constants.UNDERSCORE + extension.toUpperCase())) {
			String[] folders = appPath.substring(
					0,
					appPath.lastIndexOf(Constants.UNDERSCORE
							+ extension.toUpperCase())).split(File.separator);
			return folders[folders.length - 1];
		} else {
			String[] folders = appPath.split(File.separator);
			return folders[folders.length - 1];
		}
	}

	public static String readConfigValue(String key) {
		Properties prop = new Properties();
		InputStream input;
		try {
			input = new FileInputStream(configFile);
			prop.load(input);
		} catch (IOException e) {
			System.out.println("Cannot read configuration file(s)\n"
					+ e.getMessage());
		}
		return prop.getProperty(key);
	}

	public static void writeConfigValue(String key, String val) {
		Properties prop = new Properties();
		InputStream input;
		OutputStream output;
		try {
			input = new FileInputStream(configFile);
			prop.load(input);
		} catch (IOException e) {
			System.out.println("Cannot read configuration file(s)\n"
					+ e.getMessage());
		}
		prop.setProperty(key, val);
		try {
			output = new FileOutputStream(configFile);
			prop.store(output, "");
		} catch (IOException e) {
			System.out.println("Cannot read configuration file(s)\n"
					+ e.getMessage());
		}
	}

	public static String createDirectory(String path, String dir) {
		File directory = new File(path + dir);
		if (!directory.exists()) {
			directory.mkdirs();
		}
		return directory.getAbsolutePath();
	}

	public static void moveApkFilesFromList(String sourcePath,
			String destinationPath, String listFile) throws IOException {
		
		File destDir = new File(destinationPath);
		String[] apkList = FileHandler.readFileToString(listFile).split("\n");
		for (String s : apkList) {
			try{
			String name = s.split("\t")[0];
			FileUtils.moveFileToDirectory(new File(sourcePath + File.separator
					+ name), destDir, true);
			}
			catch(Exception e)
			{
				e.printStackTrace();
				System.out.println(s);
			}
		}
	}

	public static void moveApkFilesRandomly(String sourcePath,
			String destinationPath, int destCount) throws IOException {
		File destDir = new File(destinationPath);
		Collection<File> files = FileHandler.findFiles(sourcePath,
				new String[] { Constants.APK_EXTENSION });

		ArrayList<File> apklist = new ArrayList<File>(files);
		int size = apklist.size();
		int randIndex = 0;
		HashSet<String> list = new HashSet<String>();
		while (list.size() < destCount) {
			randIndex = NgramExtractor.randWithinRange(0, size - 1);
			list.add(apklist.get(randIndex).getPath());
		}
		for (String s : list) {
			FileUtils.moveFileToDirectory(new File(s), destDir, true);
		}
	}

	public static void renameApkFilesWithMd5(String sourcePath) throws IOException {
		Collection<File> files  = findFiles(sourcePath,null);
		
		for (File file:files)
		{
			FileInputStream fis = new FileInputStream(file);
			String md5 = org.apache.commons.codec.digest.DigestUtils.md5Hex(fis);
			fis.close();
			md5+=".apk";
			md5=file.getAbsolutePath().replace(file.getName(), md5);
			file.renameTo(new File(md5));
		}
		
	}

	public static void copyApkFilesRandomly(String sourcePath,
			String destinationPath, int destCount) throws IOException {
		File destDir = new File(destinationPath);
		Collection<File> files = FileHandler.findFiles(sourcePath,
				new String[] { Constants.APK_EXTENSION });

		ArrayList<File> apklist = new ArrayList<File>(files);
		int size = apklist.size();
		int randIndex = 0;
		HashSet<String> list = new HashSet<String>();
		while (list.size() < destCount) {
			randIndex = NgramExtractor.randWithinRange(0, size - 1);
			list.add(apklist.get(randIndex).getPath());
		}
		for (String s : list) {
			FileUtils.copyFileToDirectory(new File(s), destDir, true);
		}
	}

	public static void moveFileToDirectory(String filePath,
			String destinationPath) throws IOException {
		FileUtils.moveFileToDirectory(new File(filePath), new File(
				destinationPath), true);
	}

	public static byte[] readFileToByteArray(String filePath)
			throws IOException {
		return FileUtils.readFileToByteArray(FileUtils.getFile(filePath));
	}

	public static String readFileToString(String filePath) throws IOException {
		return FileUtils.readFileToString(FileUtils.getFile(filePath));
	}

	public static String readFileToHexString(String filePath)
			throws IOException {
		byte[] fileBytes = FileUtils.readFileToByteArray(FileUtils
				.getFile(filePath));
		StringBuilder sb = new StringBuilder();
		for (byte b : fileBytes) {
			sb.append(String.format("%02X", b));
		}
		return sb.toString();
	}

	public static String readFileToHexStringWithoutZeroBytes(String filePath)
			throws IOException {
		byte[] fileBytes = FileUtils.readFileToByteArray(FileUtils
				.getFile(filePath));
		StringBuilder sb = new StringBuilder();
		for (byte b : fileBytes) {
			if (b != 0) {
				sb.append(String.format("%02X", b));
			}
		}
		return sb.toString();
	}

	public static String[] findFolderContents(String path) {
		File file = new File(path);
		try {
		String[] contents = file.list(new FilenameFilter() {
			@Override
			public boolean accept(File current, String name) {
				return new File(current, name).isDirectory();
			}
		});
		for (int i = 0; i < contents.length; i++) {
			contents[i] = path + contents[i];
		}
		
		return contents;
		}
		catch (Exception e) {
			return null;
		}
	}

	public static Collection<File> findFiles(String path, String[] extensions) {
		return FileUtils.listFiles(FileUtils.getFile(path), extensions, true);
	}

}