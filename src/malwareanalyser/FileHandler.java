/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package malwareanalyser;

import java.io.*;
import java.util.Properties;

import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.StringUtils;

import java.util.Collection;

/**
 *
 * @author msgeden
 */
public class FileHandler {

    private static final String configFile = "config.properties";

    
    public static String[] getAppPaths(String dataPath, String extension, boolean isTestData) {
        String dataTypeFolder = StringUtils.EMPTY;
        if (!(dataPath.contains(File.separator + Constants.TEST_LABEL + File.separator) || dataPath.contains(File.separator + Constants.TRAIN_LABEL + File.separator))) {
            dataTypeFolder = isTestData ? Constants.TEST_LABEL : Constants.TRAIN_LABEL;
        }
        String classPathA = dataPath + File.separator + dataTypeFolder + File.separator + Constants.CLASS_A_NAME + File.separator + extension.toUpperCase() + File.separator;
        String classPathB = dataPath + File.separator + dataTypeFolder + File.separator + Constants.CLASS_B_NAME + File.separator + extension.toUpperCase() + File.separator;
        String[] appPaths = ArrayUtils.addAll(FileHandler.findFolderContents(classPathA), FileHandler.findFolderContents(classPathB));
        return appPaths;
    }
    
    public static String getAppNameOfFile(String appPath, String extension) {
        //Retrieve app name from file path
        if (appPath.contains(Constants.UNDERSCORE + extension.toUpperCase())) {
            String[] folders = appPath.substring(0, appPath.lastIndexOf(Constants.UNDERSCORE + extension.toUpperCase())).split(File.separator);
            return folders[folders.length - 1];
        } else {
            String[] folders = appPath.split(File.separator);
            return folders[folders.length - 1];
        }
    }
    
    public static String readConfigValue(String key) {
        Properties prop = new Properties();
        InputStream input;
        try {
            input = new FileInputStream(configFile);
            prop.load(input);
        } catch (IOException e) {
            System.out.println("Cannot read configuration file(s)\n" + e.getMessage());
        }
        return prop.getProperty(key);
    }

    public static String createDirectory(String path, String dir) {
        File directory = new File(path + dir);
        if (!directory.exists()) {
            directory.mkdirs();
        }
        return directory.getAbsolutePath();
    }

    public static void moveFileToDirectory(String filePath, String destinationPath) throws IOException {
        FileUtils.moveFileToDirectory(new File(filePath), new File(destinationPath), true);
    }

    public static byte[] readFileToByteArray(String filePath) throws IOException {
        return FileUtils.readFileToByteArray(FileUtils.getFile(filePath));
    }

    public static String readFileToString(String filePath) throws IOException {
        return FileUtils.readFileToString(FileUtils.getFile(filePath));
    }

    public static String readFileToHexString(String filePath) throws IOException {
        byte[] fileBytes = FileUtils.readFileToByteArray(FileUtils.getFile(filePath));
        StringBuilder sb = new StringBuilder();
        for (byte b : fileBytes) {
            sb.append(String.format("%02X", b));
        }
        return sb.toString();
    }

    public static String readFileToHexStringWithoutZeroBytes(String filePath) throws IOException {
        byte[] fileBytes = FileUtils.readFileToByteArray(FileUtils.getFile(filePath));
        StringBuilder sb = new StringBuilder();
        for (byte b : fileBytes) {
            if (b != 0) {
                sb.append(String.format("%02X", b));
            }
        }
        return sb.toString();
    }

    public static String[] findFolderContents(String path) {
        File file = new File(path);
        String[] contents = file.list(new FilenameFilter() {
            @Override
            public boolean accept(File current, String name) {
                return new File(current, name).isDirectory();
            }
        });
        for (int i = 0; i < contents.length; i++) {
            contents[i] = path + contents[i];
        }
        return contents;
    }

    public static Collection<File> findFiles(String path, String[] extensions) {
        return FileUtils.listFiles(FileUtils.getFile(path), extensions, true);
    }
}
