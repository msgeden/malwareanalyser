package malwareanalyser;

import java.io.File;
import java.util.Collection;
import java.util.Set;

import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.io.FileUtils;

import virustotalapi.ReportScan;
import virustotalapi.VirusTotal;

public class VirusTotalHandler {
	public static void CheckApkFiles(String sourceFolder) {
		// TODO Auto-generated method stub

		try {
			String reportFolderPath = FileHandler.createDirectory(sourceFolder,
					"reports");

			Collection<File> files = FileHandler.findFiles(sourceFolder,
					new String[] { Constants.APK_EXTENSION });

			String reportPath = reportFolderPath + File.separator
					+ "virustotal_results.tsv";
			File reportFile = new File(reportPath);
			// FileUtils.deleteQuietly(reportFile);
			System.out.print("File Name" + Constants.TAB_CHAR + "SHA256"
					+ Constants.TAB_CHAR + "Detected" + Constants.TAB_CHAR
					+ "Undetected");
			FileUtils.write(reportFile, "File Name" + Constants.TAB_CHAR
					+ "SHA256" + Constants.TAB_CHAR + "Detected"
					+ Constants.TAB_CHAR + "Undetected", true);
			int count = 0;
			VirusTotal VT = new VirusTotal(
					FileHandler
							.readConfigValue(Constants.VIRUS_TOTAL_TOKEN_CONFIG));
			for (File file : files) {

				String apkReportFilePath = file.getParentFile()
						.getAbsolutePath()
						+ File.separator
						+ "reports"
						+ File.separator + file.getName().replace("apk", "tsv");
				File apkReportFile = new File(apkReportFilePath);
				if (!apkReportFile.exists()) {

					int detected = 0;
					int undetected = 0;

					byte[] data = FileUtils.readFileToByteArray(file);

					String sha256Hex = DigestUtils.sha256Hex(data);
					try {
						count++;
						Set<ReportScan> reports = VT.ReportScan(sha256Hex);
						FileUtils.write(apkReportFile, "\nAV"
								+ Constants.TAB_CHAR + "Detected"
								+ Constants.TAB_CHAR + "Malware"
								+ Constants.TAB_CHAR + "Update", true);
						// Output the details of each scan result from a vendor
						for (ReportScan report : reports) {
							if (report.getDetected().equals("true"))
								detected++;
							else
								undetected++;

							FileUtils.write(
									apkReportFile,
									"\n" + report.getVendor()
											+ Constants.TAB_CHAR
											+ report.getDetected()
											+ Constants.TAB_CHAR
											+ report.getMalwarename()
											+ Constants.TAB_CHAR
											+ report.getUpdate(), true);
						}
					} catch (Exception e) {
						System.out.print("\n" + file.getName()
								+ Constants.TAB_CHAR + "ERROR");
						FileUtils.write(reportFile, "\n" + file.getName()
								+ Constants.TAB_CHAR + "ERROR", true);

					}
					if ((detected + undetected) != 0) {
						System.out.print("\n" + file.getName()
								+ Constants.TAB_CHAR + sha256Hex
								+ Constants.TAB_CHAR + detected
								+ Constants.TAB_CHAR + undetected);
						FileUtils.write(reportFile, "\n" + file.getName()
								+ Constants.TAB_CHAR + sha256Hex
								+ Constants.TAB_CHAR + detected
								+ Constants.TAB_CHAR + undetected, true);
					}
				}
				if (count != 0 && count % 4 == 0)
					Thread.sleep(61000);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void CheckReportWithTopTenAV(String sourceFolder) {
		// TODO Auto-generated method stub

		try {

			Collection<File> files = FileHandler.findFiles(sourceFolder,
					new String[] { "tsv" });

			String reportFilePath = sourceFolder + File.separator
					+ "malware_list.tsv";
			File reportFile = new File(reportFilePath);
			FileUtils.deleteQuietly(reportFile);
			System.out.print("File Name\tFamily\n");
			String malwareName = "";
			for (File file : files) {
				int detected = 0;
				String[] lines = FileHandler.readFileToString(file
						.getAbsolutePath()).split("\n");
				for (String line:lines)
				{
					if (line.contains("AntiVir\ttrue"))
						detected++;
					if (line.contains("AVG\ttrue"))
						detected++;
					if (line.contains("BitDefender\ttrue"))
					{
						detected++;
						malwareName=line.split("\t")[2]; 
					}
					if (line.contains("ClamAV\ttrue"))
					{
						detected++;
						if (malwareName.equals("")) 
							malwareName=line.split("\t")[2];
					}
					if (line.contains("ESET-NOD32\ttrue"))
						detected++;
					if (line.contains("F-Secure\ttrue"))
					{
						detected++;
						if (malwareName.equals("")) 
							malwareName=line.split("\t")[2];
					
					}
					if (line.contains("Kaspersky\ttrue"))
					{
						detected++;
						if (malwareName.equals("")) 
							malwareName=line.split("\t")[2];
					
					}
					if (line.contains("McAfee\ttrue"))
						detected++;
					if (line.contains("Panda\ttrue"))
						detected++;
					if (line.contains("Sophos\ttrue"))
					{
						detected++;
						if (malwareName.equals("")) 
							malwareName=line.split("\t")[2];
					
					}
				}
				if (detected >= 2) {
					FileUtils
							.write(reportFile,
									file.getName().replace(".tsv", ".apk")
											+ "\t"+ malwareName +"\n", true);
					System.out.print(file.getName().replace(".tsv", ".apk")
							+ "\t"+ malwareName +"\n");
				}

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}
