/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package malwareanalyser;

/**
 *
 * @author msgeden
 */
public class MalwareAnalyser {

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String[] args) {

		// Extract apk files to the specific file extensions
		String trainDataPath = "/Users/msgeden/Desktop/Dataset/Train/";
		String testDataPath = "/Users/msgeden/Desktop/Dataset/Test/";
		String reportPath = "/Users/msgeden/Desktop/MalwareAnalyser/reports/";
		// args = new String[]{"-x","-dex","--all",trainDataPath};
		// args = new String[]{"-x","-sml","--all",trainDataPath};
		// args = new String[]{"-x","-cls","--all",trainDataPath};
		// args = new String[]{"-x","-all","--all",trainDataPath};

		// Construct top ranked ngrams
		// args = new String[]{"-n","-dex",trainDataPath, "-train"};
		// args = new String[]{"-n","-sml",trainDataPath, "-train"};
		//args = new String[] { "-n", "-cls", trainDataPath, "-train" };
		// args = new String[]{"-n", "-all", trainDataPath, "-train"};

		// Generate training and test data from top ranked ngrams
		// args = new String[]{"-d", "-dex",
		// reportPath+"dex_topranked_ngrams_4.tsv", trainDataPath, "-train"};
		// args = new String[]{"-d", "-sml",
		// reportPath+"smali_topranked_ngrams_4.tsv", trainDataPath, "-train"};
		//args = new String[]{"-d", "-cls",
		//reportPath+"class_topranked_ngrams_4.tsv", trainDataPath, "-train"};
		// args = new String[]{"-d", "-dex",
		// reportPath+"dex_topranked_ngrams_4.tsv", testDataPath, "-test"};
		// args = new String[]{"-d", "-sml",
		// reportPath+"smali_topranked_ngrams_4.tsv", testDataPath, "-test"};
		//args = new String[]{"-d", "-cls",
		//		reportPath+"class_topranked_ngrams_4.tsv", testDataPath, "-test"};

		// Run classifier algorithms and print results
		// args = new String[]{"-c", "svm", "-dex",
		// reportPath+"train_dex_ngram_4.arff",
		// reportPath+"test_dex_ngram_4.arff"};
		// args = new String[]{"-c", "svm", "-sml",
		// reportPath+"train_smali_ngram_4.arff",reportPath+"test_smali_ngram_4.arff"};
		args = new String[]{"-c", "j48", "-cls",
		 reportPath+"train_class_ngram_4_250.arff",reportPath+"test_class_ngram_4_250.arff"};
		
		//args = new String[]{"-cmnb", "-cls", testDataPath, reportPath+"condprob_ngrams_4.tsv"};

		try {
			if (args.length > 3) {
				if ((args[0].equals("-x") || args[0].equals("--extract"))) {
					if (args[1].equals("-dex")) {
						if (args[2].equals("--all")) {
							ReverseEngineer.extractAllApkFilesAsDex(args[3]);
						} else {
							ReverseEngineer.extractApkFileAsDex(args[2]);
						}
					} else if (args[1].equals("-sml")) {
						if (args[2].equals("--all")) {
							ReverseEngineer.extractAllApkFilesAsSmali(args[3]);
						} else {
							ReverseEngineer.extractApkFileAsSmali(args[2]);
						}
					} else if (args[1].equals("-cls")) {
						if (args[2].equals("--all")) {
							ReverseEngineer.extractAllApkFilesAsClass(args[3]);
						} else {
							ReverseEngineer.extractApkFileAsClass(args[2]);
						}
					} else if (args[1].equals("-all")) {
						if (args[2].equals("--all")) {
							ReverseEngineer.extractAllApkFilesAsDex(args[3]);
							ReverseEngineer.extractAllApkFilesAsSmali(args[3]);
							ReverseEngineer.extractAllApkFilesAsClass(args[3]);
						} else {
							ReverseEngineer.extractApkFileAsDex(args[2]);
							ReverseEngineer.extractApkFileAsSmali(args[2]);
							ReverseEngineer.extractApkFileAsClass(args[2]);
						}
					} else {
						throw new Exception();
					}
				} else if ((args[0].equals("-n") || args[0].equals("--ngram"))) {
					if (args[1].equals("-dex")) {
						NgramExtractor.generateDistinctiveNgramsFiles(args[2],
								Constants.DEX_EXTENSION,
								args[3].equals("-test"));
					} else if (args[1].equals("-sml")) {
						NgramExtractor.generateDistinctiveNgramsFiles(args[2],
								Constants.SMALI_EXTENSION,
								args[3].equals("-test"));
					} else if (args[1].equals("-cls")) {
						NgramExtractor.generateDistinctiveNgramsFiles(args[2],
								Constants.CLASS_EXTENSION,
								args[3].equals("-test"));
					} else if (args[1].equals("-all")) {
						NgramExtractor.generateDistinctiveNgramsFiles(args[2],
								Constants.DEX_EXTENSION,
								args[3].equals("-test"));
						NgramExtractor.generateDistinctiveNgramsFiles(args[2],
								Constants.SMALI_EXTENSION,
								args[3].equals("-test"));
						NgramExtractor.generateDistinctiveNgramsFiles(args[2],
								Constants.CLASS_EXTENSION,
								args[3].equals("-test"));
					} else {
						throw new Exception();
					}
				} else if ((args[0].equals("-d") || args[0].equals("--data"))) {
					if (args[1].equals("-dex")) {
						NgramExtractor.prepareWekaFileData(args[2], args[3],
								Constants.DEX_EXTENSION,
								args[4].equals("-test"));
					} else if (args[1].equals("-sml")) {
						NgramExtractor.prepareWekaFileData(args[2], args[3],
								Constants.SMALI_EXTENSION,
								args[4].equals("-test"));
					} else if (args[1].equals("-cls")) {
						NgramExtractor.prepareWekaFileData(args[2], args[3],
								Constants.CLASS_EXTENSION,
								args[4].equals("-test"));
					} else {
						throw new Exception();
					}
				} else if ((args[0].equals("-c") || args[0]
						.equals("--classify"))) {
					if (args[2].equals("-dex")) {
						WekaClassifier.getClassifierResults(args[3], args[4],
								Constants.DEX_EXTENSION, args[1]);
					} else if (args[2].equals("-sml")) {
						WekaClassifier.getClassifierResults(args[3], args[4],
								Constants.SMALI_EXTENSION, args[1]);
					} else if (args[2].equals("-cls")) {
						WekaClassifier.getClassifierResults(args[3], args[4],
								Constants.CLASS_EXTENSION, args[1]);
					} else {
						throw new Exception();
					}

				} else if ((args[0].equals("-cmnb") || args[0]
						.equals("--custommnb"))) {
					if (args[1].equals("-cls")) {
						MultinomialNaiveBayesClassifier.getClassifierResults(args[3], testDataPath, Constants.CLASS_EXTENSION, "test".equals("test"));
							
					} else {
						throw new Exception();
					}

				} else {
					throw new Exception();
				}
			} else {
				throw new Exception();
			}

		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("Invalid arguments!");
		}
	}
	// TODO:Usage help
}
