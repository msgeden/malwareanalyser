/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package malwareanalyser;

import java.io.File;
import java.util.ArrayList;

import org.apache.commons.cli.BasicParser;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;

/**
 *
 * @author msgeden
 */
public class MalwareAnalyser extends BasicParser {

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String[] args) {
		BasicParser parser = new BasicParser();
		Options options = new Options()
				.addOption(
						new Option("cpr", "-copy-file-randomly", true,
								"specify the number of files for random copy [n]"))
				.addOption(
						new Option("mvr", "-move-file-randomly", true,
								"specify the number of files for random move [n]"))
				.addOption(
						new Option("rnmd5", "-rename-with-md5", true,
								"rename apk files with the md5 checksum for the given folder [p]"))
				.addOption(
						new Option("mvl", "-move-files-in-list", true,
								"specify the list file [f]"))
				.addOption(
						new Option("sp", "-source-path", true,
								"specify the source directory of apk files [p]"))
				.addOption(
						new Option("dp", "-destination-path", true,
								"specify the destionation directory of apk files [p]"))
				.addOption(
						new Option("tp", "-training-path", true,
								"specify the path of apps for training [p]"))
				.addOption(
						new Option("vp", "-validation-path", true,
								"specify the path of apps for validation [p]"))
				.addOption(
						new Option("rp", "-report-path", true,
								"specify the path of reports [p]"))
				.addOption(
						new Option("fe", "-file-extension", true,
								"specify the file extension to be analysed [f]"))
				.addOption(
						new Option("ua", "-unzip-apk", false,
								"unzip apk files to the given extension type"))
				.addOption(
						new Option("xn", "-extract-ngrams", false,
								"extract distinctive ngrams from training set"))
				.addOption(
						new Option("xh", "-extract-hashes", false,
								"extract distinctive signatures from training set"))
				.addOption(
						new Option("ht", "-hash-type", true,
								"hash type that will be used for analysis 0:class, 1:method, 2:field"))
				.addOption(
						new Option("nf", "-ngrams-file", true,
								"specify the distinctive ngrams file to be used [f]"))
				.addOption(
						new Option("hf", "-hashes-file", true,
								"specify the distinctive class hashes file to be used [f]"))

				.addOption(
						new Option(
								"gwn",
								"-generate-weka",
								true,
								"generate weka files from distinctive ngrams by specifying the number of inputs for generation seperated by commas[n]"))
				.addOption(
						new Option(
								"gwh",
								"-generate-weka",
								true,
								"generate weka files from distinctive signatures by specifying the number of inputs for generation seperated by commas[n]"))

				.addOption(
						new Option("wt", "-weka-training-file", true,
								"specify the path of weka file for training [p]"))
				.addOption(
						new Option("wv", "-weka-validation-file", true,
								"specify the path of weka file for validation [p]"))
				.addOption(
						new Option("cw", "-classify-with-weka", true,
								"classify apps with the given weka algorithm [a]"))
				.addOption(
						new Option("cwa", "-classify-with-all", true,
								"classify apps with all weka algorithms"))
				.addOption(
						new Option("cvt", "-check-with-virustotal", true,
								"check apps with virus total api for the given source folder [f]"))

				.addOption(
						new Option("mnbc", "-classify-with-mnb", false,
								"classify apps with the custom multinomial naive bayes algorithm [a]"))
				.addOption(
						new Option("all", "-all-steps", true,
								"perform all steps of the application excluding step [e]"));

		// String trainDataPath = "/Users/msgeden/Desktop/Data_6/Train/";
		// String testDataPath = "/Users/msgeden/Desktop/Data_6/Test/";
		// String reportPath = "/Users/msgeden/Desktop/Data_6/Output/";
		// String fileExtension = Constants.CLASS_EXTENSION;
		String ngramSize = FileHandler
		 .readConfigValue(Constants.NGRAM_SIZE_CONFIG);
		String[] numbersOfInputs = FileHandler.readConfigValue(
				Constants.NUMBER_OF_DATA_INPUT_CONFIG).split(",");
		// String distintiveNgramsFile = reportPath + fileExtension
		// + Constants.UNDERSCORE + "distinctive_" + ngramSize
		// + "-grams_by_classwise_ig.tsv";

		// args = new String[]{"-tp",trainDataPath};
		// args = new String[]{"-vp",testDataPath};
		// args = new String[]{"-fe",fileExtension};

		// args = new
		// String[]{"-ua","-tp",trainDataPath,"-vp",testDataPath,"-fe",fileExtension};
		// args = new String[]{"-xn"};
		// args = new String[]{"-xh"};

		// args = new String[]{"-xn","-tp",trainDataPath,"-fe",fileExtension};
		// args = new String[]{"-xh","-tp",trainDataPath,"-fe",fileExtension};

		// args = new String[]{"-gwn","100,200"};
		// args = new String[]{"-gwh","100,200"};

		//args = new String[] { "-all","1n" };
		// args = new String[]{"-cwa","4-grams"};
		//args = new String[]{"-cvt","/Users/msgeden/Desktop/Contagio-Malwares/"};
		//args = new String[]{"-gwn", "100,250,500,750,1000,1500,2000,3000,5000,8000","-vp", "../Data_3600/Test/"};
		//args = new String[]{"-gwn", "100,250,500,750,1000,1500,2000,3000,5000,8000","-vp", "../Data_3600/Test/"};

		try {
			CommandLine commandLine = parser.parse(options, args);
			if (commandLine.hasOption("tp")) {
				FileHandler.writeConfigValue(Constants.TRAINING_PATH_CONFIG,
						commandLine.getOptionValue("tp"));
			}
			if (commandLine.hasOption("vp")) {
				FileHandler.writeConfigValue(Constants.VALIDATION_PATH_CONFIG,
						commandLine.getOptionValue("vp"));
			}
			if (commandLine.hasOption("rp")) {
				FileHandler.writeConfigValue(Constants.REPORTS_PATH_CONFIG,
						commandLine.getOptionValue("rp"));
			}
			if (commandLine.hasOption("fe")) {
				FileHandler.writeConfigValue(Constants.FILE_EXTENSION_CONFIG,
						commandLine.getOptionValue("fe"));
			}

			if (commandLine.hasOption("cpr")) {
				FileHandler.copyApkFilesRandomly(
						commandLine.getOptionValue("sp"),
						commandLine.getOptionValue("dp"),
						Integer.parseInt(commandLine.getOptionValue("cpr")));
			}

			if (commandLine.hasOption("mvr")) {
				FileHandler.moveApkFilesRandomly(
						commandLine.getOptionValue("sp"),
						commandLine.getOptionValue("dp"),
						Integer.parseInt(commandLine.getOptionValue("mvr")));
			}
			if (commandLine.hasOption("mvl")) {
				FileHandler.moveApkFilesFromList(
						commandLine.getOptionValue("sp"),
						commandLine.getOptionValue("dp"),
						commandLine.getOptionValue("mvl"));
			}
			if (commandLine.hasOption("rnmd5")) {
				FileHandler.renameApkFilesWithMd5(commandLine.getOptionValue("rnmd5"));
			}

			String extension = commandLine.hasOption("fe") ? commandLine
					.getOptionValue("fe") : FileHandler
					.readConfigValue(Constants.FILE_EXTENSION_CONFIG);

			if (commandLine.hasOption("ua")) {

				if (!commandLine.hasOption("tp")
						&& !commandLine.hasOption("vp")) {

					ReverseEngineer
							.extractAllApkFiles(
									commandLine.hasOption("tp") ? commandLine
											.getOptionValue("tp")
											: FileHandler
													.readConfigValue(Constants.TRAINING_PATH_CONFIG),
									extension);
					ReverseEngineer
							.extractAllApkFiles(
									commandLine.hasOption("vp") ? commandLine
											.getOptionValue("vp")
											: FileHandler
													.readConfigValue(Constants.VALIDATION_PATH_CONFIG),
									extension);
				} else {
					if (commandLine.hasOption("tp")) {
						ReverseEngineer
								.extractAllApkFiles(
										commandLine.hasOption("tp") ? commandLine
												.getOptionValue("tp")
												: FileHandler
														.readConfigValue(Constants.TRAINING_PATH_CONFIG),
										extension);

					}
					if (commandLine.hasOption("vp")) {
						ReverseEngineer
								.extractAllApkFiles(
										commandLine.hasOption("vp") ? commandLine
												.getOptionValue("vp")
												: FileHandler
														.readConfigValue(Constants.VALIDATION_PATH_CONFIG),
										extension);

					}

				}

			}
			if (commandLine.hasOption("xn")) {
				NgramExtractor
						.generateDistinctiveNgramsFiles(
								commandLine.hasOption("tp") ? commandLine
										.getOptionValue("tp")
										: FileHandler
												.readConfigValue(Constants.TRAINING_PATH_CONFIG),
								extension, false);

			}
			if (commandLine.hasOption("xh")
					&& (extension
							.equals(Constants.BERTILLONAGE_CLASS_EXTENSION) || extension
							.equals(Constants.BERTILLONAGE_DEX_EXTENSION))) {
				SignatureExtractor
						.generateDistinctiveHashesFiles(
								commandLine.hasOption("tp") ? commandLine
										.getOptionValue("tp")
										: FileHandler
												.readConfigValue(Constants.TRAINING_PATH_CONFIG),
								extension, false);

			}

			if (commandLine.hasOption("nf")) {
				FileHandler.writeConfigValue(
						Constants.DISTINCTIVE_NGRAMS_FILE_CONFIG,
						commandLine.getOptionValue("nf"));
			}
			if (commandLine.hasOption("hf")) {
				FileHandler.writeConfigValue(
						Constants.DISTINCTIVE_HASHES_FILE_CONFIG,
						commandLine.getOptionValue("hf"));
			}
			if (commandLine.hasOption("gwn")) {

				String[] inputNumbers = commandLine.getOptionValue("gwn")
						.split(",");
				ArrayList<Integer> inputSizes = new ArrayList<Integer>();
				for (String s : inputNumbers)
					inputSizes.add(Integer.parseInt(s));
				if (!commandLine.hasOption("tp")
						&& !commandLine.hasOption("vp")) {
					NgramExtractor
							.prepareWekaFiles(
									commandLine.hasOption("nf") ? commandLine
											.getOptionValue("nf")
											: FileHandler
													.readConfigValue(Constants.DISTINCTIVE_NGRAMS_FILE_CONFIG),
									commandLine.hasOption("tp") ? commandLine
											.getOptionValue("tp")
											: FileHandler
													.readConfigValue(Constants.TRAINING_PATH_CONFIG),
									extension, false, inputSizes);
					NgramExtractor
							.prepareWekaFiles(
									commandLine.hasOption("nf") ? commandLine
											.getOptionValue("nf")
											: FileHandler
													.readConfigValue(Constants.DISTINCTIVE_NGRAMS_FILE_CONFIG),
									commandLine.hasOption("vp") ? commandLine
											.getOptionValue("vp")
											: FileHandler
													.readConfigValue(Constants.VALIDATION_PATH_CONFIG),
									extension, true, inputSizes);
				} else {
					if (commandLine.hasOption("tp")) {
						NgramExtractor
								.prepareWekaFiles(
										commandLine.hasOption("nf") ? commandLine
												.getOptionValue("nf")
												: FileHandler
														.readConfigValue(Constants.DISTINCTIVE_NGRAMS_FILE_CONFIG),
										commandLine.hasOption("tp") ? commandLine
												.getOptionValue("tp")
												: FileHandler
														.readConfigValue(Constants.TRAINING_PATH_CONFIG),
										extension, false, inputSizes);

					}
					if (commandLine.hasOption("vp")) {
						NgramExtractor
								.prepareWekaFiles(
										commandLine.hasOption("nf") ? commandLine
												.getOptionValue("nf")
												: FileHandler
														.readConfigValue(Constants.DISTINCTIVE_NGRAMS_FILE_CONFIG),
										commandLine.hasOption("vp") ? commandLine
												.getOptionValue("vp")
												: FileHandler
														.readConfigValue(Constants.VALIDATION_PATH_CONFIG),
										extension, true, inputSizes);

					}

				}
			}
			if (commandLine.hasOption("gwh")) {

				String[] inputNumbers = commandLine.getOptionValue("gwh")
						.split(",");
				ArrayList<Integer> inputSizes = new ArrayList<Integer>();
				for (String s : inputNumbers)
					inputSizes.add(Integer.parseInt(s));
				if (!commandLine.hasOption("tp")
						&& !commandLine.hasOption("vp")) {
					SignatureExtractor
							.prepareWekaFiles(
									commandLine.hasOption("hf") ? commandLine
											.getOptionValue("hf")
											: FileHandler
													.readConfigValue(Constants.DISTINCTIVE_HASHES_FILE_CONFIG),
									commandLine.hasOption("tp") ? commandLine
											.getOptionValue("tp")
											: FileHandler
													.readConfigValue(Constants.TRAINING_PATH_CONFIG),
									extension, false, inputSizes);
					SignatureExtractor
							.prepareWekaFiles(
									commandLine.hasOption("hf") ? commandLine
											.getOptionValue("hf")
											: FileHandler
													.readConfigValue(Constants.DISTINCTIVE_HASHES_FILE_CONFIG),
									commandLine.hasOption("vp") ? commandLine
											.getOptionValue("vp")
											: FileHandler
													.readConfigValue(Constants.VALIDATION_PATH_CONFIG),
									extension, true, inputSizes);
				} else {
					if (commandLine.hasOption("tp")) {
						SignatureExtractor
								.prepareWekaFiles(
										commandLine.hasOption("hf") ? commandLine
												.getOptionValue("hf")
												: FileHandler
														.readConfigValue(Constants.DISTINCTIVE_HASHES_FILE_CONFIG),
										commandLine.hasOption("tp") ? commandLine
												.getOptionValue("tp")
												: FileHandler
														.readConfigValue(Constants.TRAINING_PATH_CONFIG),
										extension, false, inputSizes);

					}
					if (commandLine.hasOption("vp")) {
						SignatureExtractor
								.prepareWekaFiles(
										commandLine.hasOption("hf") ? commandLine
												.getOptionValue("hf")
												: FileHandler
														.readConfigValue(Constants.DISTINCTIVE_HASHES_FILE_CONFIG),
										commandLine.hasOption("vp") ? commandLine
												.getOptionValue("vp")
												: FileHandler
														.readConfigValue(Constants.VALIDATION_PATH_CONFIG),
										extension, true, inputSizes);

					}

				}
			}
			if (commandLine.hasOption("cw")) {
				WekaClassifier.getClassifierResults(
						commandLine.getOptionValue("wt"),
						commandLine.getOptionValue("wv"), extension,
						commandLine.getOptionValue("cw"),
						ngramSize+"-grams");
			}
			if (commandLine.hasOption("cwa")) {
				WekaClassifier.getClassifierResultsForAllNgrams(commandLine
						.getOptionValue("cwa"));
			}
			if (commandLine.hasOption("cvt")) {
				VirusTotalHandler.CheckApkFiles(commandLine
						.getOptionValue("cvt"));
				VirusTotalHandler.CheckReportWithTopTenAV(commandLine
						.getOptionValue("cvt") + File.separator + "reports");
			}
			if (commandLine.hasOption("mnbc")) {
				MultinomialNaiveBayesClassifier
						.getClassifierResults(
								FileHandler
										.readConfigValue(Constants.COND_PROBS_OF_NGRAMS_FILE_CONFIG),
								commandLine.hasOption("vp") ? commandLine
										.getOptionValue("vp")
										: FileHandler
												.readConfigValue(Constants.VALIDATION_PATH_CONFIG),
								extension, true);
			}

			if (commandLine.hasOption("all")) {
				if (commandLine.getOptionValue("all").contains("0")) {
					// Files extraction
					ReverseEngineer
							.extractAllApkFiles(
									commandLine.hasOption("tp") ? commandLine
											.getOptionValue("tp")
											: FileHandler
													.readConfigValue(Constants.TRAINING_PATH_CONFIG),
									extension);
					ReverseEngineer
							.extractAllApkFiles(
									commandLine.hasOption("vp") ? commandLine
											.getOptionValue("vp")
											: FileHandler
													.readConfigValue(Constants.VALIDATION_PATH_CONFIG),
									extension);
				}
				if (commandLine.getOptionValue("all").contains("1n")) {
					// Find distinctive ngrams
					NgramExtractor
							.generateDistinctiveNgramsFiles(
									commandLine.hasOption("tp") ? commandLine
											.getOptionValue("tp")
											: FileHandler
													.readConfigValue(Constants.TRAINING_PATH_CONFIG),
									extension, false);
				}
				if (commandLine.getOptionValue("all").contains("1h")) {
					if (extension
							.equals(Constants.BERTILLONAGE_CLASS_EXTENSION)
							|| extension
									.equals(Constants.BERTILLONAGE_DEX_EXTENSION)
									|| extension
									.equals(Constants.PERM_EXTENSION)
									|| extension
									.equals(Constants.MANF_EXTENSION)) {
						SignatureExtractor
								.generateDistinctiveHashesFiles(
										commandLine.hasOption("tp") ? commandLine
												.getOptionValue("tp")
												: FileHandler
														.readConfigValue(Constants.TRAINING_PATH_CONFIG),
										extension, false);

					}
				}
				if (commandLine.getOptionValue("all").contains("1m")) {
					NgramExtractor
					.generateHeatMapData(
							commandLine.hasOption("tp") ? commandLine
									.getOptionValue("tp")
									: FileHandler
											.readConfigValue(Constants.TRAINING_PATH_CONFIG),
							extension, false);
				}
				ArrayList<Integer> inputSizes = new ArrayList<Integer>();
				for (String s : numbersOfInputs)
					inputSizes.add(Integer.parseInt(s));

				if (commandLine.getOptionValue("all").contains("2n")) {
					// Generate Weka files

					NgramExtractor
							.prepareWekaFiles(
									commandLine.hasOption("nf") ? commandLine
											.getOptionValue("nf")
											: FileHandler
													.readConfigValue(Constants.DISTINCTIVE_NGRAMS_FILE_CONFIG),
									commandLine.hasOption("tp") ? commandLine
											.getOptionValue("tp")
											: FileHandler
													.readConfigValue(Constants.TRAINING_PATH_CONFIG),
									extension, false, inputSizes);
					NgramExtractor
							.prepareWekaFiles(
									commandLine.hasOption("nf") ? commandLine
											.getOptionValue("nf")
											: FileHandler
													.readConfigValue(Constants.DISTINCTIVE_NGRAMS_FILE_CONFIG),
									commandLine.hasOption("vp") ? commandLine
											.getOptionValue("vp")
											: FileHandler
													.readConfigValue(Constants.VALIDATION_PATH_CONFIG),
									extension, true, inputSizes);
				}
				if (commandLine.getOptionValue("all").contains("2h")) {
					if (extension
							.equals(Constants.BERTILLONAGE_CLASS_EXTENSION)
							|| extension
									.equals(Constants.BERTILLONAGE_DEX_EXTENSION)
									|| extension
									.equals(Constants.PERM_EXTENSION)
									|| extension
									.equals(Constants.MANF_EXTENSION)) {
						SignatureExtractor
								.prepareWekaFiles(
										commandLine.hasOption("hf") ? commandLine
												.getOptionValue("hf")
												: FileHandler
														.readConfigValue(Constants.DISTINCTIVE_HASHES_FILE_CONFIG),
										commandLine.hasOption("tp") ? commandLine
												.getOptionValue("tp")
												: FileHandler
														.readConfigValue(Constants.TRAINING_PATH_CONFIG),
										extension, false, inputSizes);
						SignatureExtractor
								.prepareWekaFiles(
										commandLine.hasOption("hf") ? commandLine
												.getOptionValue("hf")
												: FileHandler
														.readConfigValue(Constants.DISTINCTIVE_HASHES_FILE_CONFIG),
										commandLine.hasOption("vp") ? commandLine
												.getOptionValue("vp")
												: FileHandler
														.readConfigValue(Constants.VALIDATION_PATH_CONFIG),
										extension, true, inputSizes);

					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("Invalid arguments!");
		}
	}
	// TODO:Usage help
}
