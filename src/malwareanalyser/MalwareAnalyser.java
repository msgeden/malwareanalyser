/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package malwareanalyser;

import org.apache.commons.cli.BasicParser;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;

/**
 *
 * @author msgeden
 */
public class MalwareAnalyser extends BasicParser {

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String[] args) {
		BasicParser parser = new BasicParser();
		Options options = new Options()
				.addOption(
						new Option("tp", "-training-path", true,
								"specify the path of apps for training [p]"))
				.addOption(
						new Option("vp", "-validation-path", true,
								"specify the path of apps for validation [p]"))
				.addOption(
						new Option("rp", "-report-path", true,
								"specify the path of reports [p]"))
				.addOption(
						new Option("fe", "-file-extension", true,
								"specify the file extension to be analysed [f]"))
				.addOption(
						new Option("ua", "-unzip-apk", false,
								"unzip apk files to the given extension type"))
				.addOption(
						new Option("xn", "-extract-ngrams", false,
								"extract distinctive ngrams from training set"))
				.addOption(
						new Option("nf", "-ngrams-file", true,
								"specify the distinctive ngrams file to be used [f]"))
				.addOption(
						new Option("gw", "-generate-weka", false,
								"generate weka files from distinctive ngrams"))
				.addOption(
						new Option("tf", "-training-file", true,
								"specify the path of weka file for training [p]"))
				.addOption(
						new Option("vf", "-validation-file", true,
								"specify the path of weka file for validation [p]"))
				.addOption(
						new Option("cw", "-classify-with-weka", true,
								"classify apps with the given weka algorithm [a]"));

		String trainDataPath = "/Users/msgeden/Desktop/Data_2_1/Train/";
		String testDataPath = "/Users/msgeden/Desktop/Data_2_1/Test/";
		String reportPath = "/Users/msgeden/Desktop/MalwareAnalyser/reports/";
		String fileExtension = Constants.CLASS_EXTENSION;
		String ngramSize = FileHandler.readConfigValue(Constants.NGRAM_SIZE_CONFIG);
		String numberOfInputs = FileHandler.readConfigValue(Constants.NUMBER_OF_DATA_INPUT_CONFIG);
		String distintiveNgramsFile = reportPath + fileExtension + "_topranked_ngrams_ig_"+ngramSize+".tsv";
		
		//args = new String[]{"-tp",trainDataPath};
		//args = new String[]{"-vp",testDataPath};
		//args = new String[]{"-fe",fileExtension};
	
		//args = new String[]{"-ua","-tp",trainDataPath,"-vp",testDataPath,"-fe",fileExtension};

		//args = new String[]{"-xn","-tp",trainDataPath,"-fe",fileExtension};
		
		//args = new String[]{"-gw","-nf",distintiveNgramsFile,"-fe",fileExtension};

		//args = new String[]{"-cw","j48","-tf",reportPath+"train_class_ngram_"+ngramSize+"_"+ numberOfInputs+".arff","-vf",reportPath+"test_class_ngram_"+ngramSize+"_"+ numberOfInputs+".arff"};

		try {
			CommandLine commandLine = parser.parse(options, args);
			if (commandLine.hasOption("tp")) {
				FileHandler.writeConfigValue(Constants.TRAINING_PATH_CONFIG,
						commandLine.getOptionValue("tp"));
			}
			if (commandLine.hasOption("vp")) {
				FileHandler.writeConfigValue(Constants.VALIDATION_PATH_CONFIG,
						commandLine.getOptionValue("vp"));
			}
			if (commandLine.hasOption("rp")) {
				FileHandler.writeConfigValue(Constants.REPORTS_PATH_CONFIG,
						commandLine.getOptionValue("rp"));
			}
			if (commandLine.hasOption("fe")) {
				FileHandler.writeConfigValue(Constants.FILE_EXTENSION_CONFIG,
						commandLine.getOptionValue("fe"));
			}

			String extension = commandLine.hasOption("fe") ? commandLine
					.getOptionValue("fe") : FileHandler
					.readConfigValue(Constants.FILE_EXTENSION_CONFIG);
			if (commandLine.hasOption("ua")) {
				if (extension.equals(Constants.DEX_EXTENSION)) {
					ReverseEngineer
							.extractAllApkFilesAsDex(commandLine
									.hasOption("tp") ? commandLine
									.getOptionValue("tp")
									: FileHandler
											.readConfigValue(Constants.TRAINING_PATH_CONFIG));
					ReverseEngineer
							.extractAllApkFilesAsDex(commandLine
									.hasOption("vp") ? commandLine
									.getOptionValue("vp")
									: FileHandler
											.readConfigValue(Constants.VALIDATION_PATH_CONFIG));
				} else if (extension.equals(Constants.SMALI_EXTENSION)) {
					ReverseEngineer
							.extractAllApkFilesAsSmali(commandLine
									.hasOption("tp") ? commandLine
									.getOptionValue("tp")
									: FileHandler
											.readConfigValue(Constants.TRAINING_PATH_CONFIG));
					ReverseEngineer
							.extractAllApkFilesAsSmali(commandLine
									.hasOption("vp") ? commandLine
									.getOptionValue("vp")
									: FileHandler
											.readConfigValue(Constants.VALIDATION_PATH_CONFIG));
				} else if (extension.equals(Constants.CLASS_EXTENSION)) {
					ReverseEngineer
							.extractAllApkFilesAsClass(commandLine
									.hasOption("tp") ? commandLine
									.getOptionValue("tp")
									: FileHandler
											.readConfigValue(Constants.TRAINING_PATH_CONFIG));
					ReverseEngineer
							.extractAllApkFilesAsClass(commandLine
									.hasOption("vp") ? commandLine
									.getOptionValue("vp")
									: FileHandler
											.readConfigValue(Constants.VALIDATION_PATH_CONFIG));
				}
			}
			if (commandLine.hasOption("xn")) {
				NgramExtractor
						.generateDistinctiveNgramsFiles(
								commandLine.hasOption("tp") ? commandLine
										.getOptionValue("tp")
										: FileHandler
												.readConfigValue(Constants.TRAINING_PATH_CONFIG),
								extension, false);

			}
			if (commandLine.hasOption("nf")) {
				FileHandler.writeConfigValue(
						Constants.DISTINCTIVE_NGRAMS_FILE_CONFIG,
						commandLine.getOptionValue("nf"));
			}
			if (commandLine.hasOption("gw")) {
				NgramExtractor
						.prepareWekaFileData(
								commandLine.hasOption("nf") ? commandLine
										.getOptionValue("nf")
										: FileHandler
												.readConfigValue(Constants.DISTINCTIVE_NGRAMS_FILE_CONFIG),
								commandLine.hasOption("tp") ? commandLine
										.getOptionValue("tp")
										: FileHandler
												.readConfigValue(Constants.TRAINING_PATH_CONFIG),
								extension, false);
				NgramExtractor
						.prepareWekaFileData(
								commandLine.hasOption("nf") ? commandLine
										.getOptionValue("nf")
										: FileHandler
												.readConfigValue(Constants.DISTINCTIVE_NGRAMS_FILE_CONFIG),
								commandLine.hasOption("vp") ? commandLine
										.getOptionValue("vp")
										: FileHandler
												.readConfigValue(Constants.VALIDATION_PATH_CONFIG),
								extension, true);
			}
			if (commandLine.hasOption("cw")) {
				WekaClassifier
						.getClassifierResults(
								commandLine.getOptionValue("tf"),
								commandLine.getOptionValue("vf"),
								extension, commandLine.getOptionValue("cw"));
			}
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("Invalid arguments!");
		}
	}
	// TODO:Usage help
}
