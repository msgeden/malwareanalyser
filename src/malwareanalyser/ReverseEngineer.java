/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package malwareanalyser;

import java.io.*;
import java.util.*;

import com.google.common.io.Files;

import java.util.concurrent.TimeUnit;

import org.apache.commons.io.FileUtils;

/**
 *
 * @author msgeden
 */
public class ReverseEngineer {

	public static void extractApkFile(String filePath,String extension) {
		if (extension.equals(Constants.DEX_EXTENSION))
			extractApkFileAsDex(filePath);
		else if (extension.equals(Constants.SMALI_EXTENSION))
			extractApkFileAsSmali(filePath);	
		else if (extension.equals(Constants.CLASS_EXTENSION))
			extractApkFileAsClass(filePath);
	}
	public static void extractAllApkFiles(String filePath,String extension) throws IOException {
		if (extension.equals(Constants.DEX_EXTENSION))
			extractAllApkFilesAsDex(filePath);
		else if (extension.equals(Constants.SMALI_EXTENSION))
			extractAllApkFilesAsSmali(filePath);	
		else if (extension.equals(Constants.CLASS_EXTENSION))
			extractAllApkFilesAsClass(filePath);
	}
	public static void extractApkFileAsDex(String filePath) {
		unzipFileWithExcludes(filePath, Constants.DEX_EXTENSION);
	}

	public static void extractAllApkFilesAsDex(String dirPath) {
		Collection<File> files = FileHandler.findFiles(dirPath,
				new String[] { Constants.APK_EXTENSION });
		for (File file : files) {
			extractApkFileAsDex(file.getAbsolutePath());
		}
	}

	public static void extractApkFileAsSmali(String filePath) {
		try {
			apktoolDecompiler(filePath);
			String extractedDirStr = filePath.substring(0,
					filePath.lastIndexOf(Files.getFileExtension(filePath)) - 1);
			String newDirStr = FileHandler.createDirectory(new File(
					extractedDirStr).getParent() + File.separator,
					Constants.SMALI_EXTENSION.toUpperCase());
			File dir = new File(extractedDirStr);
			File newDir = new File(newDirStr + File.separator
					+ Files.getNameWithoutExtension(filePath)
					+ Constants.UNDERSCORE
					+ Constants.SMALI_EXTENSION.toUpperCase());
			if (dir.isDirectory()) {
				dir.renameTo(newDir);
			}
			FileUtils.deleteDirectory(new File(newDir + File.separator
					+ "assets"));
			FileUtils
					.deleteDirectory(new File(newDir + File.separator + "res"));
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void extractAllApkFilesAsSmali(String dirPath)
			throws IOException {
		Collection<File> files = FileHandler.findFiles(dirPath,
				new String[] { Constants.APK_EXTENSION });
		for (File file : files) {
			extractApkFileAsSmali(file.getAbsolutePath());
		}
	}

	public static void extractApkFileAsClass(String filePath) {
		dex2jarExecuter(filePath);
		String jarPath = filePath.substring(0,
				filePath.lastIndexOf(File.separator) + 1)
				+ Files.getNameWithoutExtension(filePath)
				+ Constants.EXTENSION_SEPERATOR + Constants.JAR_EXTENSION;
		unzipFile(jarPath, Constants.CLASS_EXTENSION.toUpperCase());
		FileUtils.deleteQuietly(new File(jarPath));
	}

	public static void extractAllApkFilesAsClass(String dirPath) {
		Collection<File> files = FileHandler.findFiles(dirPath,
				new String[] { Constants.APK_EXTENSION });
		for (File file : files) {
			extractApkFileAsClass(file.getAbsolutePath());
		}
	}

	private static void unzipFile(String filePath, String folderPostFix) {
		String fileExtension = Files.getFileExtension(filePath);
		if (!Arrays
				.asList(new String[] { Constants.JAR_EXTENSION,
						Constants.APK_EXTENSION }).contains(
						fileExtension.toLowerCase())) {
			return;
		}
		String fileDirPath = filePath.substring(0,
				filePath.lastIndexOf(File.separator) + 1);
		String destinationFolder = Files.getNameWithoutExtension(filePath)
				+ Constants.UNDERSCORE + folderPostFix.toUpperCase();
		String destinationPath = FileHandler.createDirectory(fileDirPath,
				folderPostFix.toUpperCase() + File.separator
						+ destinationFolder);
		ProcessBuilder pb = new ProcessBuilder("unzip", filePath, "-d",
				destinationPath);
		pb.directory(new File(fileDirPath));
		try {
			Process p = pb.start();
			LogStreamReader lsr = new LogStreamReader(p.getInputStream());
			Thread thread = new Thread(lsr, "LogStreamReader");
			thread.start();
			p.waitFor(Constants.PROCESS_TIMEOUT_SECS, TimeUnit.SECONDS);
			p.destroy();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private static void unzipFileWithExcludes(String filePath,
			String folderPostFix) {
		String fileExtension = Files.getFileExtension(filePath);
		if (!Arrays
				.asList(new String[] { Constants.JAR_EXTENSION,
						Constants.APK_EXTENSION }).contains(
						fileExtension.toLowerCase())) {
			return;
		}
		String fileDirPath = filePath.substring(0,
				filePath.lastIndexOf(File.separator) + 1);
		String destinationFolder = Files.getNameWithoutExtension(filePath)
				+ Constants.UNDERSCORE + folderPostFix.toUpperCase();
		String destinationPath = FileHandler.createDirectory(fileDirPath,
				folderPostFix.toUpperCase() + File.separator
						+ destinationFolder);
		ProcessBuilder pb = new ProcessBuilder("unzip", filePath, "-d",
				destinationPath, "-x", "res/*", "-x", "assets/*");
		pb.directory(new File(fileDirPath));
		try {
			Process p = pb.start();
			LogStreamReader lsr = new LogStreamReader(p.getInputStream());
			Thread thread = new Thread(lsr, "LogStreamReader");
			thread.start();
			p.waitFor(Constants.PROCESS_TIMEOUT_SECS, TimeUnit.SECONDS);
			p.destroy();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private static void apktoolDecompiler(String filePath) {
		String fileExtension = Files.getFileExtension(filePath);
		String fileName = Files.getNameWithoutExtension(filePath);
		if (!Arrays.asList(new String[] { Constants.APK_EXTENSION }).contains(
				fileExtension.toLowerCase())) {
			return;
		}
		String fileDirPath = filePath.substring(0,
				filePath.lastIndexOf(File.separator) + 1);
		ProcessBuilder pb = new ProcessBuilder("java", "-jar",
				FileHandler.readConfigValue(Constants.APKTOOL_PATH_CONFIG),
				"d", fileName + "." + fileExtension);
		pb.directory(new File(fileDirPath));
		try {
			Process p = pb.start();
			LogStreamReader lsr = new LogStreamReader(p.getInputStream());
			Thread thread = new Thread(lsr, "LogStreamReader");
			thread.start();
			p.waitFor(Constants.PROCESS_TIMEOUT_SECS, TimeUnit.SECONDS);
			p.destroy();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private static void dex2jarExecuter(String apkFilePath) {
		String fileExtension = Files.getFileExtension(apkFilePath);
		if (!Arrays.asList(new String[] { Constants.APK_EXTENSION }).contains(
				fileExtension.toLowerCase())) {
			return;
		}
		String fileDirPath = apkFilePath.substring(0,
				apkFilePath.lastIndexOf(File.separator) + 1);
		String jarPath = fileDirPath
				+ Files.getNameWithoutExtension(apkFilePath) + "."
				+ Constants.JAR_EXTENSION;
		ProcessBuilder pb = new ProcessBuilder(
				FileHandler.readConfigValue(Constants.DEX2JAR_PATH_CONFIG),
				"-f", "-o", jarPath, apkFilePath);
		pb.directory(new File(fileDirPath));
		try {
			Process p = pb.start();
			LogStreamReader lsr = new LogStreamReader(p.getInputStream());
			Thread thread = new Thread(lsr, "LogStreamReader");
			thread.start();
			p.waitFor(Constants.PROCESS_TIMEOUT_SECS, TimeUnit.SECONDS);
			p.destroy();
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("Could not extract apk file with dex2jar tool:"
					+ apkFilePath);
		}
		System.out.println("Successfully extracted apk file with dex2jar tool:"
				+ apkFilePath);
	}
}

class LogStreamReader implements Runnable {

	private BufferedReader reader;

	public LogStreamReader(InputStream is) {
		this.reader = new BufferedReader(new InputStreamReader(is));
	}

	public void run() {
		try {
			String line = reader.readLine();
			while (line != null) {
				System.out.println(line);
				line = reader.readLine();
			}
			reader.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
