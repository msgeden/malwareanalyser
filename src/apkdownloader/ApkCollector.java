/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package apkdownloader;

/**
 *
 * @author msgeden
 */
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collection;

import malwareanalyser.Constants;
import malwareanalyser.FileHandler;

import org.apache.commons.io.FileUtils;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

import com.gc.android.market.api.MarketSession;
import com.gc.android.market.api.model.Market.GetAssetResponse.InstallAsset;

public class ApkCollector {

	public static int noOfAppsDownloaded = 0;

	private static MarketSession session = null;

	private static String APIUrl = "https://42matters.com/api/1/apps/query.json?access_token=";

	public static void main(String[] args) throws IOException {

//		parseAPIJsonFiles("http://www.appchina.com/app/","/Users/msgeden/Desktop/Markets/");
//		parseAPIJsonFiles("http://www.anzhi.com/pkg/","/Users/msgeden/Desktop/Markets/");
//		parseAPIJsonFiles("http://www.wandoujia.com/apps/","/Users/msgeden/Desktop/Markets/");
//		parseAPIJsonFiles("http://www.coolapk.com/apk/","/Users/msgeden/Desktop/Markets/");
//		parseAPIJsonFiles("https://play.google.com/store/apps/details?id=","/Users/msgeden/Desktop/Markets/");
//		
//		for (int i = 1; i<0; i++)
//			callMattersAPI(0, 1, i);
//		session = getSession();
//		for (String app : apps) {
//			if (!downloadApp(app)) {
//				System.out
//						.println("Looks like you have reached the download limit");
//				break;
//
//			} else
//				noOfAppsDownloaded++;
//		}
//
//		System.out.println("Total No Of Apps Downloaded:" + noOfAppsDownloaded
//				+ " out of " + apps.size());
	}

	public static void parseAPIJsonFiles(String urlPrefix, String filesPath) throws IOException {
		try {
		
			Collection<File> jsonFiles = FileHandler.findFiles(filesPath, new String[]{"json"});
			for (File jsonFile : jsonFiles)
			{
				ArrayList<String> apps = new ArrayList<String>();
				String fileContent = FileUtils.readFileToString(jsonFile);
				JSONArray results = new JSONArray();
				results = (JSONArray) ((JSONObject) (new JSONParser())
						.parse(fileContent)).get("results");
				String dirName = jsonFile.getName().replace(".json", "");
				String dirPath = FileHandler.createDirectory(jsonFile.getParent()+File.separator,dirName);
				String appListPath = dirPath+File.separator + dirName+".html";
				File appList = new File(appListPath);
				for (int i = 0; i < results.size(); i++) {
					JSONObject app = (JSONObject) results.get(i);
					String packageName = (String) app.get("package_name");
					apps.add(packageName);
					FileUtils.write(appList, "<a href=\""+urlPrefix + packageName + "\">" + urlPrefix  + packageName + "</a><br>", true);
				}
			}
			
			
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}

	public static ArrayList<String> callMattersAPI(int minSize, int maxSize,
			int pageNumber) throws IOException {
		CloseableHttpClient httpClient = HttpClientBuilder.create().build();
		ArrayList<String> apps = new ArrayList<String>();
		try {
			JSONObject queryParams = new JSONObject();
			queryParams.put("sort", "market_update");
			queryParams.put("from", (pageNumber - 1) * 100);
			queryParams.put("num", 100);
			queryParams.put("i18n_lang", new JSONObject());
			queryParams.put("cat_int", new JSONObject());
			queryParams.put("content_rating", new JSONObject());
			queryParams.put("sort_order", "asc");
			queryParams.put("downloads_lte", "");
			queryParams.put("downloads_gte", 1000);
			queryParams.put("price_flag", "free");
			queryParams.put("size_lte", maxSize);
			queryParams.put("market_update_dynamic", "date");
			queryParams.put("market_update", "2010-08-15T00:00:00.000Z");
			queryParams.put("rating_gte", 4);
			queryParams.put("size_gte", minSize);
			queryParams.put("ratings_count_gte", 500);

			JSONObject query = new JSONObject();
			query.put("name", "Most Popular Apps");
			query.put("platform", "android");
			query.put("query_params", queryParams);

			JSONObject json = new JSONObject();
			json.put("query", query);
			HttpPost request = new HttpPost(
					APIUrl
							+ FileHandler
									.readConfigValue(Constants.ACCESS_TOKEN_CONFIG));

			StringEntity params = new StringEntity(json.toString());
			request.setEntity(params);
			HttpResponse response = httpClient.execute(request);
			BufferedReader rd = new BufferedReader(new InputStreamReader(
					response.getEntity().getContent()));

			StringBuffer jsonOutput = new StringBuffer();
			String line = "";
			while ((line = rd.readLine()) != null) {
				jsonOutput.append(line);
			}

			JSONArray results = new JSONArray();
			results = (JSONArray) ((JSONObject) (new JSONParser())
					.parse(jsonOutput.toString())).get("results");
			DecimalFormat formatter = new DecimalFormat("00");
			String appsJsonPath = FileHandler
					.readConfigValue(Constants.APK_DOWNLOAD_DIR_CONFIG)
					+ minSize
					+ "-"
					+ maxSize
					+ "_MB"
					+ Constants.UNDERSCORE + formatter.format(pageNumber) + ".json";
			File appsJson = new File(appsJsonPath);
			FileUtils.write(appsJson, results.toJSONString(), true);
			
			
			String appListPath = FileHandler
					.readConfigValue(Constants.APK_DOWNLOAD_DIR_CONFIG)
					+ minSize
					+ "-"
					+ maxSize
					+ "_MB"
					+ Constants.UNDERSCORE + formatter.format(pageNumber) + ".html";
			File appList = new File(appListPath);
			for (int i = 0; i < results.size(); i++) {
				JSONObject app = (JSONObject) results.get(i);
				String packageName = (String) app.get("package_name");
				apps.add(packageName);
				FileUtils.write(appList,"<a href=\"https://play.google.com/store/apps/details?id="+packageName + "\">"+packageName + "</a><br>", true);
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		} finally {
			httpClient.close();
		}
		return apps;
	}

	private static MarketSession getSession() {
		MarketSession session = new MarketSession(true);
	    String userName = FileHandler.readConfigValue(Constants.USER_NAME_CONFIG);
	    String pwd =FileHandler.readConfigValue(Constants.PWD_CONFIG); 
	    String deviceId = FileHandler.readConfigValue(Constants.DEVICE_ID_CONFIG);
	    String authToken = FileHandler.readConfigValue(Constants.AUTH_TOKEN_CONFIG);
        session.getContext().setAndroidId(deviceId);
	    session.setAuthSubToken(authToken);
	    session.login(userName, pwd,deviceId);
		return session;
	}

	private static boolean downloadApp(String appID) {
		String fileToSave = FileHandler
				.readConfigValue(Constants.APK_DOWNLOAD_DIR_CONFIG)
				+ "/"
				+ appID + ".apk";
		boolean result = false;
		if (!(new File(fileToSave)).exists()) {
			try {

				InstallAsset ia = session.queryGetAssetRequest(appID)
						.getInstallAsset(0);
				String cookieName = ia.getDownloadAuthCookieName();
				String cookieValue = ia.getDownloadAuthCookieValue();
				URL url = new URL(ia.getBlobUrl());

				HttpURLConnection conn = (HttpURLConnection) url
						.openConnection();
				conn.setRequestMethod("GET");
				conn.setRequestProperty("User-Agent",
						"Android-Market/2 (sapphire PLAT-RC33); gzip");
				conn.setRequestProperty("Cookie", cookieName + "="
						+ cookieValue);

				InputStream inputstream = (InputStream) conn.getInputStream();

				System.out.println("Trying to Download " + fileToSave);
				BufferedOutputStream stream = new BufferedOutputStream(
						new FileOutputStream(fileToSave));
				byte buf[] = new byte[1024];
				int k = 0;
				while ((k = inputstream.read(buf)) != -1) {
					stream.write(buf, 0, k);
				}
				inputstream.close();
				stream.close();
				noOfAppsDownloaded++;
				result = true;

			} catch (Exception e) {
				result = false;
				e.printStackTrace();
			}

		}
		return result;
	}
}
